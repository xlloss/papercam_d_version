#include "text_ctl.h"

#define ASCII_START					32


ISP_UINT8 gDrawTextEn = 0;

#if DRAW_TEXT_FEATURE_EN==ON
ISP_UINT8 ASCII8x8[][8] = {
	//32   space
	{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
	//33    !
	{0x20,0x20,0x20,0x20,0x00,0x20,0x20,0x00},
	//34    "
	{0x50,0x50,0x00,0x00,0x00,0x00,0x00,0x00},
	//35		#
	{0x50,0xF8,0x50,0x50,0x50,0xF8,0x50,0x00},
	//36		$
	{0x20,0x78,0xA0,0x70,0x28,0xF0,0x20,0x00},
	//37		%
	{0x00,0x08,0x90,0x20,0x48,0x80,0x00,0x00},
	//38		&
	{0x20,0x50,0x50,0x20,0x58,0x90,0x68,0x00},
	//39		'
	{0x40,0x40,0x80,0x00,0x00,0x00,0x00,0x00},
	//40		(
	{0x20,0x40,0x40,0x40,0x40,0x40,0x20,0x00},
	//41		)
	{0x40,0x20,0x20,0x20,0x20,0x20,0x40,0x00},
	//42		*
	{0x00,0xA8,0x70,0xF8,0x70,0xA8,0x00,0x00},
	//43		+
	{0x00,0x20,0x20,0xF8,0x20,0x20,0x00,0x00},
	//44		'
	{0x00,0x00,0x00,0x00,0x00,0x20,0x40,0x00},
	//45		-
	{0x00,0x00,0x00,0xF0,0x00,0x00,0x00,0x00},
	//46		.
	{0x00,0x00,0x00,0x00,0x00,0x60,0x60,0x00},
	//47		/
	{0x00,0x08,0x18,0x20,0x40,0x80,0x00,0x00},
	//48		0
	{0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00},
	//49		1
	{0x20,0x60,0xA0,0x20,0x20,0x20,0x20,0x00},
	//50		2
	{0x70,0x88,0x08,0x10,0x20,0x40,0xF8,0x00},
	//51		3
	{0x70,0x88,0x08,0x30,0x08,0x88,0x70,0x00},
	//52		4
	{0x30,0x50,0x90,0x90,0xF8,0x10,0x10,0x00},
	//53		5
	{0xF8,0x80,0x80,0xF0,0x08,0x88,0x70,0x00},
	//54		6
	{0x38,0x40,0x80,0xF0,0x88,0x88,0x70,0x00},
	//55		7
	{0xF8,0x08,0x10,0x20,0x40,0x40,0x40,0x00},
	//56		8
	{0x70,0x88,0x88,0x70,0x88,0x88,0x70,0x00},
	//57		9
	{0x70,0x88,0x88,0x78,0x08,0x10,0x60,0x00},
	//58		:
	{0x00,0x00,0x60,0x00,0x00,0x60,0x00,0x00},
	//59		;
	{0x00,0x00,0x60,0x00,0x00,0x60,0x40,0x00},
	//60		<
	{0x18,0x20,0x40,0x80,0x40,0x20,0x18,0x00},
	//61		=
	{0x00,0x00,0xF0,0x00,0xF0,0x00,0x00,0x00},
	//62		>
	{0x80,0x40,0x20,0x18,0x20,0x40,0x80,0x00},
	//63		?
	{0x70,0x88,0x08,0x18,0x20,0x00,0x20,0x00},
	//64		@
	{0x70,0x88,0x88,0xB8,0xB0,0x80,0x78,0x00},
	//65		A
	{0x70,0x88,0x88,0xF8,0x88,0x88,0x88,0x00},
	//66		B
	{0xF0,0x88,0x88,0xF0,0x88,0x88,0xF0,0x00},
	//67		C
	{0x70,0x88,0x80,0x80,0x80,0x88,0x70,0x00},
	//68		D
	{0xF0,0x88,0x88,0x88,0x88,0x88,0xF0,0x00},
	//69		E
	{0xF8,0x80,0x80,0xF0,0x80,0x80,0xF8,0x00},
	//70		F
	{0xF8,0x80,0x80,0xF0,0x80,0x80,0x80,0x00},
	//71		G
	{0x70,0x88,0x80,0xB8,0x88,0x88,0x70,0x00},
	//72		H
	{0x88,0x88,0x88,0xF8,0x88,0x88,0x88,0x00},
	//73		I
	{0x70,0x20,0x20,0x20,0x20,0x20,0x70,0x00},
	//74		J
	{0x18,0x18,0x18,0x18,0x18,0x90,0x60,0x00},
	//75		K
	{0x88,0x90,0xA0,0xC0,0xA0,0x90,0x88,0x00},
	//76		L
	{0x80,0x80,0x80,0x80,0x80,0x80,0xF8,0x00},
	//77		M
	{0x88,0xD8,0xA8,0x88,0x88,0x88,0x88,0x00},
	//78		N
	{0x88,0xC8,0xE8,0xB8,0x98,0x88,0x88,0x00},
	//79		O
	{0x70,0x88,0x88,0x88,0x88,0x88,0x70,0x00},
	//80		P
	{0xF0,0x88,0x88,0xF0,0x80,0x80,0x80,0x00},
	//81		Q
	{0x70,0x88,0x88,0x88,0xA8,0x98,0x70,0x00},
	//82		R
	{0xF0,0x88,0x88,0xF0,0xA0,0x90,0x88,0x00},
	//83		S
	{0x70,0x88,0x80,0x70,0x08,0x88,0x70,0x00},
	//84		T
	{0xF8,0x20,0x20,0x20,0x20,0x20,0x20,0x00},
	//85		U
	{0x88,0x88,0x88,0x88,0x88,0x88,0x70,0x00},
	//86		V
	{0x88,0x88,0x88,0x88,0x88,0x50,0x20,0x00},
	//87		W
	{0x88,0x88,0x88,0x88,0x88,0xA8,0x50,0x00},
	//88		X
	{0x88,0x50,0x20,0x20,0x50,0x88,0x88,0x00},
	//89		Y
	{0x88,0x88,0x50,0x20,0x20,0x20,0x20,0x00},
	//90		Z
	{0xF8,0x08,0x18,0x20,0x40,0x80,0xF8,0x00},
	//91		[
	{0x70,0x40,0x40,0x40,0x40,0x40,0x70,0x00},
	//92	  "\"
	{0x80,0xC0,0x60,0x30,0x18,0x08,0x00,0x00},
	//93		]
	{0xE0,0x20,0x20,0x20,0x20,0x20,0xE0,0x00},
	//94		^
	{0x20,0x50,0x88,0x00,0x00,0x00,0x00,0x00},
	//95		_
	{0x00,0x00,0x00,0x00,0x00,0x00,0xF8,0x00},
	//96		`
	{0x60,0x20,0x00,0x00,0x00,0x00,0x00,0x00},
	//97		a
	{0x00,0x00,0x70,0x08,0x78,0x88,0x78,0x00},
	//98		b
	{0x80,0x80,0xF0,0x88,0x88,0x88,0xF0,0x00},
	//99		c
	{0x00,0x00,0x70,0x88,0x80,0x88,0x70,0x00},
	//100		d
	{0x08,0x08,0x78,0x88,0x88,0x88,0x78,0x00},
	//101		e
	{0x00,0x00,0x70,0x88,0xF8,0x80,0x78,0x00},
	//102		f
	{0x30,0x48,0x40,0xE0,0x40,0x40,0x40,0x00},
	//103		g
	{0x00,0x78,0x88,0x88,0x88,0x78,0x08,0x70},
	//104		h
	{0x80,0x80,0xF0,0x88,0x88,0x88,0x88,0x00},
	//105		i
	{0x20,0x00,0x60,0x20,0x20,0x20,0x70,0x00},
	//106		j
	{0x18,0x00,0x18,0x18,0x18,0x18,0x90,0x60},
	//107		k
	{0x80,0x80,0x90,0xA0,0xC0,0xA0,0x90,0x00},
	//108		l
	{0x60,0x20,0x20,0x20,0x20,0x20,0x70,0x00},
	//109		m
	{0x00,0x00,0xD0,0xA8,0xA8,0xA8,0xA8,0x00},
	//110		n
	{0x00,0x00,0xF0,0x88,0x88,0x88,0x88,0x00},
	//111		o
	{0x00,0x00,0x70,0x88,0x88,0x88,0x70,0x00},
	//112		p
	{0x00,0xF0,0x88,0x88,0x88,0xF0,0x80,0x80},
	//113		q
	{0x00,0x78,0x88,0x88,0x88,0x78,0x08,0x18},
	//114		r
	{0x00,0x00,0x70,0x48,0x40,0x40,0x40,0x00},
	//115		s
	{0x00,0x00,0x78,0x80,0x70,0x08,0xF0,0x00},
	//116		t
	{0x40,0x40,0xE0,0x40,0x40,0x48,0x30,0x00},
	//117		u
	{0x00,0x00,0x88,0x88,0x88,0x88,0x78,0x00},
	//118		v
	{0x00,0x00,0x88,0x88,0x88,0x50,0x20,0x00},
	//119		w
	{0x00,0x00,0x88,0x88,0x88,0xA8,0x50,0x00},
	//120		x
	{0x00,0x00,0x88,0x50,0x20,0x50,0x88,0x00},
	//121		y
	{0x00,0x88,0x88,0x88,0x88,0x78,0x08,0xF0},
	//122		z
	{0x00,0x00,0xF8,0x18,0x20,0x40,0xF8,0x00},
	//123		{
	{0x30,0x40,0x40,0x80,0x40,0x40,0x30,0x00},
	//124		|
	{0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x00},
	//125		}
	{0xC0,0x20,0x20,0x18,0x20,0x20,0xC0,0x00},
	//126		~
	{0x00,0x68,0x90,0x00,0x00,0x00,0x00,0x00},
};

ISP_UINT8 gFontPixelMask[8] = {0x80,0x40,0x20,0x10,0x08,0x04,0x02,0x01};

void PrintString1BytePixel(	ISP_UINT8 *dest_buf,	//image buffer
							ISP_UINT32 line_width,	//pixel per line
							ISP_UINT32 offset,		//string offset in text line
							ISP_UINT8 front_color,
							ISP_UINT8 back_color,
							ISP_UINT8 txt_interval,	//interval between text in pixel
							ISP_INT8* text)
{
	ISP_INT32 x, y;
	while (*text != 0x00) {
		for (y = 0; y < 8; ++y) {
			ISP_UINT8 *pixel = dest_buf + line_width * y + offset;
			ISP_UINT8 t = ASCII8x8[*text-ASCII_START][y];
			if (back_color) {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
					else
						pixel[x] = back_color;
				}
			} else {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
				}
			}
		}
		dest_buf += 8 + txt_interval; //next position
		text++;	//next ISP_INT8
	}
}

void PrintStringYuv422(		ISP_UINT16 *dest_buf,	//image buffer
							ISP_UINT32 line_width,	//pixel per line
							ISP_UINT32 offset,		//string offset in text line
							ISP_UINT16 front_color,
							ISP_UINT16 back_color,
							ISP_UINT8 txt_interval,	//interval between text in pixel
							ISP_INT8* text)
{
	ISP_INT32 x, y;
	while (*text != 0x00) {
		for (y = 0; y < 8; ++y) {
			ISP_UINT16 *pixel = dest_buf + line_width * y + offset;
			ISP_UINT8 t = ASCII8x8[*text-ASCII_START][y];
			for (x = 0; x < 8; ++x) {
				if (gFontPixelMask[x]&t)
					((ISP_UINT8*)(pixel+x))[0] = front_color;
			}
		}
		dest_buf += 8 + txt_interval; //next position
		text++;	//next ISP_INT8
	}
}

void PrintString2BytePixel(	ISP_UINT16 *dest_buf,	//image buffer
							ISP_UINT32 line_width,	//pixel per line
							ISP_UINT32 offset,		//string offset in text line
							ISP_UINT16 front_color,
							ISP_UINT16 back_color,
							ISP_UINT8 txt_interval,	//interval between text in pixel
							ISP_INT8* text)
{
	ISP_INT32 x, y;
	while (*text != 0x00) {
		for (y = 0; y < 8; ++y) {
			ISP_UINT16 *pixel = dest_buf + line_width*y + offset;
			ISP_UINT8 t = ASCII8x8[*text-ASCII_START][y];
			if (back_color) {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
					else
						pixel[x] = back_color;
				}
			} else {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
				}
			}
		}
		dest_buf += 8 + txt_interval; //next position
		text++;	//next ISP_INT8
	}
}

void PrintString4BytePixel(	ISP_UINT32 *dest_buf,	//image buffer
							ISP_UINT32 line_width,	//pixel per line
							ISP_UINT32 offset,		//string offset in text line
							ISP_UINT32 front_color,
							ISP_UINT32 back_color,
							ISP_UINT8 txt_interval,	//interval between text in pixel
							ISP_INT8* text)
{
	ISP_INT32 x, y;
	while (*text != 0x00) {
		for (y = 0; y < 8; ++y) {
			ISP_UINT32 *pixel = dest_buf + line_width*y + offset;
			ISP_UINT8 t = ASCII8x8[*text-ASCII_START][y];
			if (back_color) {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
					else
						pixel[x] = back_color;
				}
			} else {
				for (x = 0; x < 8; ++x) {
					if (gFontPixelMask[x]&t)
						pixel[x] = front_color;
				}
			}
		}
		dest_buf += 8 + txt_interval; //next position
		text++;	//next ISP_INT8
	}
}

ISP_INT8* _strcpy(ISP_INT8* dest, ISP_INT8* src)
{
	ISP_INT8* ret = dest;
	do {*dest++ = *src++;} while (*src);
	*dest = 0;
	return ret;
}

ISP_INT32 _strlen(ISP_INT8* str)
{
	ISP_INT32 len = 0;
	while (*str++) ++len;
	return len;
}

ISP_INT8* _strcat(ISP_INT8* dest, ISP_INT8* src)
{
	ISP_INT8* ret = dest;
	while (*dest) ++dest;
	do {*dest++ = *src++;} while(*src);
	*dest = 0;
	return ret;
}

ISP_INT8* itohs(ISP_UINT32 val, ISP_INT8* buf)
{
	ISP_INT32 n = 0;
	ISP_INT8 temp_str[10] = {0,0,0,0,0,0,0,0,0,0};
	ISP_INT8* ret = buf;
	ISP_UINT8 *ptrVal = (ISP_UINT8 *) &val;

	*buf++ = '0';
	*buf++ = 'x';

	for (n = 0; n < 4; ++n) {
		ISP_UINT8 c = 0;
		c = (ISP_UINT8)(ptrVal[n]&0x0F);
		temp_str[7-n*2]	= ((c<10)?'0':('A'-10)) + c;
		c = (ISP_UINT8)((ptrVal[n]>>4)&0x0F);
		temp_str[7-n*2-1] = ((c<10)?'0':('A'-10)) + c;
	}

	for (n = 0; n < 7; ++n) {
		if (temp_str[n] != '0') break;
	}

	_strcpy(buf, temp_str+n);

	return ret;
}

ISP_INT8* ui_to_ds(ISP_UINT32 val, ISP_INT8* buf)
{
	ISP_INT32 n=0;
	ISP_INT8 temp_str[12] = {0,0,0,0,0,0,0,0,0,0,0,0};
	ISP_INT8* ret = buf;

	for (n = 0; n < 11; ++n) {
		temp_str[10-n] = '0' + (val%10);
		val /= 10;
	}

	for (n = 0; n < 10; ++n) {
		if (temp_str[n] != '0') break;
	}

	_strcpy(buf, temp_str+n);
	return ret;
}

ISP_INT8* i_to_ds(ISP_INT32 val, ISP_INT8* buf)
{
	if (val>=0) {
		return ui_to_ds((ISP_UINT32) val,buf);
	} else {
		*buf++ = '-';
		return ui_to_ds((ISP_UINT32) -val,buf);
	}
}

ISP_INT32 _sprintf(ISP_INT8* buf, ISP_INT8* fmt, ...) //no va_list
{
	ISP_INT8 temp_str[32];
	ISP_INT32 n=0;
	ISP_INT8* arg = (ISP_INT8*) &fmt;

	arg += sizeof(fmt);

	for (n = 0; *fmt; fmt++) {
		if (*fmt != '%' && *fmt != '\\') {
			buf[n++] = *fmt;
			continue;
		}
		if (*fmt == '%') {
			++fmt;
			switch (*fmt) {
			case 's':
			case 'S':
				_strcpy(buf+n, *(ISP_INT8**)arg);
				n += _strlen(*(ISP_INT8**)arg);
				arg += sizeof(ISP_INT8*);
				break;
			case 'x':
			case 'X':
				itohs(*(ISP_UINT32*)arg, temp_str);
				_strcpy(buf+n, temp_str);
				arg += sizeof(ISP_UINT32);
				n += _strlen(temp_str);
				break;
			case 'd':
			case 'D':
				i_to_ds(*(ISP_INT32*)arg, temp_str);
				_strcpy(buf+n, temp_str);
				arg += sizeof(ISP_INT32);
				n += _strlen(temp_str);
				break;
			case 'c':
			case 'C':
				buf[n++] = *(ISP_INT8*)arg;
				arg += sizeof(ISP_INT8);
				break;
			case '%':
				buf[n++] = *fmt;
				break;
			default:
				buf[n++] = '%';
				buf[n++] = *fmt;
				break;
			}
		}
		if (*fmt == '\\') {
			++fmt;
			switch (*fmt) {
			case 'n':
				buf[n++] = '\n';
				break;
			case 't':
				buf[n++] = '\t';
				break;
			default:
				buf[n++] = '\n';
				break;
			}
		}
	}
	buf[n++] = 0x00;

	return n;
}

ISP_INT8 gDrawTextBuf[DRAW_TEXT_BUF_LEN];
ISP_UINT32 gTextColorFormat = 0;
ISP_UINT32 gTextPreviewBufAddr;
ISP_UINT32 gTextPreviewWidth = 640;

void VR_PrintString(ISP_INT8* txt_buf, ISP_UINT16 txt_v_offset, ISP_UINT16 txt_h_offset, ISP_UINT16 txt_front_color, ISP_UINT16 txt_back_color)
{
	ISP_UINT32 offset = txt_h_offset + txt_v_offset * gTextPreviewWidth;

	ISP_UINT32 ft_color;
	ISP_UINT32 bk_color;

	ISP_UINT32 fc[6], bc[6]; // | r | g  | b | y | u | v |

	fc[0] = ((txt_front_color >> 11) & 0x1F) << 3;
	fc[1] = ((txt_front_color >> 6 ) & 0x3F) << 2;
	fc[2] = ((txt_front_color      ) & 0x1F) << 3;

	bc[0] = ((txt_back_color >> 11) & 0x1F) << 3;
	bc[1] = ((txt_back_color >> 6 ) & 0x3F) << 2;
	bc[2] = ((txt_back_color      ) & 0x1F) << 3;

	fc[3] = (30 * fc[0] + 59 * fc[1] + 11 * fc[2]) / 100;
	fc[4] = (12800 - 17 * fc[0] - 33 * fc[1] + 50 * fc[2]) / 100;
	fc[5] = (12800 + 50 * fc[0] - 42 * fc[1] -  8 * fc[2]) / 100;

	bc[3] = (30 * bc[0] + 59 * bc[1] + 11 * bc[2]) / 100;
	bc[4] = (12800 - 17 * bc[0] - 33 * bc[1] + 50 * bc[2]) / 100;
	bc[5] = (12800 + 50 * bc[0] - 42 * bc[1] -  8 * bc[2]) / 100;

	switch (gTextColorFormat) {
	case ISP_PREVIEW_FORMAT_YUV444:
		ft_color = (((fc[3] << 8) + fc[4]) << 8) + fc[5]; // _YUV
		bk_color = (((bc[3] << 8) + bc[4]) << 8) + bc[5]; // _YUV
		PrintString4BytePixel((ISP_UINT32*)gTextPreviewBufAddr, gTextPreviewWidth, offset, ft_color, bk_color, 0, txt_buf);
		break;


	case ISP_PREVIEW_FORMAT_YUV422: default:
		ft_color = fc[3]; // _Y (no UV here to simplfy the process)
		bk_color = bc[3]; // _Y (no UV here to simplfy the process)
		PrintStringYuv422((ISP_UINT16*)gTextPreviewBufAddr, gTextPreviewWidth, offset, ft_color, bk_color, 0, txt_buf);
		break;


	case ISP_PREVIEW_FORMAT_YUV420:
		ft_color = fc[3]; // Y
		bk_color = bc[3]; // Y
		PrintString1BytePixel((ISP_UINT8*)gTextPreviewBufAddr, gTextPreviewWidth, offset, ft_color, bk_color, 0, txt_buf);
		break;

	case ISP_PREVIEW_FORMAT_RGB888:
		ft_color = (((fc[0] << 8) + fc[1]) << 8) + fc[2]; // _RGB
		bk_color = (((bc[0] << 8) + bc[1]) << 8) + bc[2]; // _RGB
		PrintString4BytePixel((ISP_UINT32*)gTextPreviewBufAddr, gTextPreviewWidth, offset, ft_color, bk_color, 0, txt_buf);
		break;

	case ISP_PREVIEW_FORMAT_RGB565:
	case ISP_PREVIEW_FORMAT_RGB555:
	case ISP_PREVIEW_FORMAT_RGB444:
		ft_color = txt_front_color; // no need to change
		bk_color = txt_back_color;  // no need to change
		PrintString2BytePixel((ISP_UINT16*)gTextPreviewBufAddr, gTextPreviewWidth, offset, ft_color, bk_color, 0, txt_buf);
		break;
	}
}
#else
ISP_INT32 _strlen(ISP_INT8* str)
{
	ISP_INT32 len = 0;
	while (*str++) ++len;
	return len;
}

void PrintStringYuv422(		ISP_UINT16 *dest_buf,	//image buffer
							ISP_UINT32 line_width,	//pixel per line
							ISP_UINT32 offset,		//string offset in text line
							ISP_UINT16 front_color,
							ISP_UINT16 back_color,
							ISP_UINT8 txt_interval,	//interval between text in pixel
							ISP_INT8* text)
{

}
#endif // DRAW_TEXT_FEATURE_EN
